---
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
    Install the frontend stack for all environments
Parameters:
  BusinessUnit:
    Type: String
    Description: Two letters country code for billing purpose
    AllowedValues:
      - MY
      - SG
      - ID
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of Desired Size AS instance
  ECRRegistry:
    Description: Main ECR Registry
    Type: String
  HpECRRepo:
    Description: Homepage ECR Repo
    Type: String
  HpBuildEcr:
    Description: Homepage image build number
    Type: String
  Instancestype:
    Description: EC2 instance type.
    Type: String
    AllowedValues:
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m4.large
      - m4.xlarge
      - c4.large
      - c4.xlarge
  KeyNamessh:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  MinSizeAS:
    Type: Number
    Default: '2'
    Description: Number of Min Size AS instance
  MaxSize:
    Type: Number
    Default: '4'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  NewRelicLicenseKey:
    Description: New Relic License Key
    Type: String
  NewRelicRPM:
    Description: New Relic RPM
    Type: String
  PagerDutyArn:
    Description: Pager Duty ARN
    Type: String
  HPagerDutyArn:
    Description: Pager Duty ARN
    Type: String
  RecordName:
    Description: The name of the DNS record to create.
    Type: String
  ResourceBucketName:
    Description: >-
      Name of the S3 bucket to retrieve the downloaded scripts or installation files
    Type: String
  SSLCertificateARN:
    Description: The SSL certificate ARN as specified in Route 53
    Type: String
  SubnetID:
    Description: Public subnets
    Type: CommaDelimitedList
  VPC:
    Description: Choose which VPC we should be deploying the stack to
    Type: 'AWS::EC2::VPC::Id'
  VpcCidr:
    Description: Enter VPC Cidr
    Type: String
  VpcDns:
    Description: Enter VPC DNS must be end with X.X.0.2
    Type: String
  HpserviceCount:
    Description: >-
      Enter Hpservice Container Count - Must be equal to no. of instance in AutoScaling
    Type: String
  Env:
    Description: Environment name
    Type: String
    AllowedValues: [prod, dev, stag]
  Version:
    Description: Version string to display in header
    Type: String
  AwslogsGroupHp:
    Description: Cloudwatch Group Name for Hp Container
    Type: String
  InstProfile:
    Description: Instance Profile Detail
    Type: String
  Project:
    Description: Project Detail
    Type: String
  Hptaskmem:
    Description: Hp Container Memory
    Type: Number
  Hptaskcpu:
    Description: Hp Container Cpu
    Type: Number
  AlbLoadBalancer:
    Description: Enquiry api load balancer
    Type: String
  HpTargetGroupPort:
    Description: Hp listener port number
    Type: Number
Conditions:
  CreateProdResources: !Not [!Equals [!Ref Env, "prod"]]

Mappings:
  AWSRegionArch2AMI:
    ap-southeast-1:
      HVM64: ami-846144f8
    ap-northeast-1:
      HVM64: ami-a99d8ad5
    ap-southeast-2:
      HVM64: ami-efda148d

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !GetAtt
            - LifecycleHandlerFunction
            - Arn
          Protocol: lambda
    DependsOn: LifecycleHandlerFunction
  InstanceTerminatingHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    Properties:
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: '600'
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_TERMINATING'
      NotificationTargetARN: !Ref NotificationTopic
      RoleARN: !GetAtt
        - AutoscalingNotificationRole
        - Arn
    DependsOn: NotificationTopic
  AutoscalingNotificationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: lambda-inline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'autoscaling:CompleteLifecycleAction'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceAttribute'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:DescribeHosts'
                  - 'ecs:ListContainerInstances'
                  - 'ecs:SubmitContainerStateChange'
                  - 'ecs:SubmitTaskStateChange'
                  - 'ecs:DescribeContainerInstances'
                  - 'ecs:UpdateContainerInstancesState'
                  - 'ecs:ListTasks'
                  - 'ecs:DescribeTasks'
                  - 'sns:Publish'
                  - 'sns:ListSubscriptions'
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole'
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LifecycleHandlerFunction
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref NotificationTopic
  LifecycleHandlerFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          ECS_CLUSTER: !Ref ECSCluster
      Code:
        ZipFile: !Join
          - ''
          - - |
              import boto3
              from os import environ
              import json
              import logging
              import time

              logging.basicConfig()
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)

              ecsClient = boto3.client('ecs')
              asgClient = boto3.client('autoscaling')
              snsClient = boto3.client('sns')

              ECS_CLUSTER = environ.get('ECS_CLUSTER')

              def publishToSNS(message, topicARN):
                  logger.info("Publish to SNS topic %s", topicARN)
                  snsResponse = snsClient.publish(
                      TopicArn=topicARN,
                      Message=json.dumps(message),
                      Subject='Publishing SNS message to invoke lambda again..'
                  )
                  return "published"


              def getContainerInstanceFromEc2Instance(ec2InstanceId):
                  instance_list = ecsClient.list_container_instances(cluster=ECS_CLUSTER)
                  instances = ecsClient.describe_container_instances(cluster=ECS_CLUSTER,
                                                               containerInstances=instance_list['containerInstanceArns'])

                  for instance in instances['containerInstances']:
                      if instance['ec2InstanceId'] == ec2InstanceId:
                          return instance

                  return None


              def drainContainerInstance(containerInstance):
                  # Check if the instance state is set to DRAINING.
                  # If not, set it, so the ECS Cluster will handle de-registering instance, draining any running tasks and moving them elsewhere
                  containerStatus = containerInstance['status']
                  if containerStatus == 'DRAINING':
                      logger.info("Container Instance ID %s on EC2 instance %s is already draining tasks.",
                                  containerInstance['containerInstanceArn'],
                                  containerInstance['ec2InstanceId'])
                  else:
                      # Make ECS API call to set the container status to DRAINING
                      logger.info("Container Instance ID %s on EC2 instance %s is currently %s, updating to DRAINING.",
                                  containerInstance['containerInstanceArn'],
                                  containerInstance['ec2InstanceId'],
                                  containerInstance['status'])
                      ecsClient.update_container_instances_state(cluster=ECS_CLUSTER,
                                                                 containerInstances=[ containerInstance['containerInstanceArn'] ],
                                                                 status='DRAINING')


              def countRunningTasks(containerInstance):
                  logger.info("Container Instance ID %s is currently running %s tasks.",
                              containerInstance['containerInstanceArn'],
                              containerInstance['runningTasksCount'])

                  return containerInstance['runningTasksCount']


              def handler(event, context):
                  topicArn = event['Records'][0]['Sns']['TopicArn']
                  line = event['Records'][0]['Sns']['Message']
                  message = json.loads(line)

                  ec2InstanceId = message['EC2InstanceId']
                  lifecycleHookName = message['LifecycleHookName']
                  asgGroupName = message['AutoScalingGroupName']

                  runningTasks = 0
                  containerInstance = getContainerInstanceFromEc2Instance(ec2InstanceId)
                  if containerInstance is not None:
                      drainContainerInstance(containerInstance)
                      runningTasks = countRunningTasks(containerInstance)

                  if runningTasks > 0:
                      logger.info('Waiting 15 seconds to republish message')
                      time.sleep(15)
                      publishToSNS(message, topicArn)
                  else:
                      logger.info('Completing lifecycle action, machine will now terminate cleanly')
                      asgClient.complete_lifecycle_action(
                          LifecycleHookName=lifecycleHookName,
                          AutoScalingGroupName=asgGroupName,
                          LifecycleActionResult='CONTINUE',
                          InstanceId=ec2InstanceId)

      Handler: index.handler
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Runtime: python3.6
      Timeout: 10

  ECSScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentStep: 1
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 25
  ECSScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentStep: 1
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -25
  EcsCPUReservationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over 5 minutes higher than 90%'
      AlarmName: !Join ['', ['ECS-CPU>90%', '-', !Ref 'ECSCluster']]
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 90
      AlarmActions:
      - !Ref ECSScaleUpPolicy
  EcsCPUReservationLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes less than 20%'
      AlarmName: !Join ['', ['ECS-CPU<20%', '-', !Ref 'ECSCluster']]
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      MetricName: CPUUtilization
      ComparisonOperator: LessThanThreshold
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      AlarmActions:
      - !Ref ECSScaleDownPolicy
  ScheduledActionUp:
    Condition: CreateProdResources
    Type: "AWS::AutoScaling::ScheduledAction"
    Properties:
      AutoScalingGroupName:
        Ref: "ECSAutoScalingGroup"
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSizeAS
      Recurrence: "0 23 * * *"
  ScheduledActionDown:
    Condition: CreateProdResources
    Type: "AWS::AutoScaling::ScheduledAction"
    Properties:
      AutoScalingGroupName:
        Ref: "ECSAutoScalingGroup"
      MaxSize: !Ref MaxSize
      MinSize: 0
      Recurrence: "0 15 * * *"
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: SubnetID
      LaunchConfigurationName:
        Ref: ContainerInstances
      AvailabilityZones: [!Select [0, !GetAZs ''], !Select [1, !GetAZs '']]
      Cooldown: '40'
      HealthCheckGracePeriod: '60'
      HealthCheckType: EC2
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupMinSize
        - GroupMaxSize
        - GroupDesiredCapacity
        - GroupInServiceInstances
        - GroupPendingInstances
        - GroupTotalInstances
        - GroupTerminatingInstances
        - GroupStandbyInstances
      MinSize:
        Ref: MinSizeAS
      MaxSize:
        Ref: MaxSize
      DesiredCapacity:
        Ref: DesiredCapacity
      Tags:
      - Value:
          Ref: AWS::StackName
        Key: CF-Name
        PropagateAtLaunch: true
      - Value:
          Ref: AWS::StackName
        Key: Name
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun: [Configure]
        Configure:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -s ${AWS::StackName}  -r ContainerInstances --configsets InstallAndRun --region ${AWS::Region} runas=root
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: ["/etc/cfn/cfn-hup.conf" , "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
              sendmail:
                enabled: 'false'
                ensureRunning: 'false'
    Properties:
      KeyName:
        Ref: KeyNamessh
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - HVM64
      InstanceType:
        Ref: Instancestype
      InstanceMonitoring: true
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref 'InstProfile'
      SecurityGroups:
      - Ref: ECSSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -ex
          /bin/echo -e '####  -----         Environment variable is ${Env}        ------------###### \n'

          function error_exit
          {
            /bin/echo $1
            /opt/aws/bin/cfn-signal -e 1 \
                                    --stack ${AWS::StackName} \
                                    --resource ECSAutoScalingGroup \
                                    --region ${AWS::Region}
            exit 1
          }

          function install_software {
            /usr/bin/yum update -y
            /usr/bin/yum install -y curl wget aws-cfn-bootstrap
            /usr/bin/easy_install awscli
          }

          function configure_hosts {
            recordName=${RecordName}
            instance_ip=$(/usr/bin/curl -q http://169.254.169.254/latest/meta-data/local-ipv4)
            domain=$(/bin/awk '/^search/ { print $2 }' /etc/resolv.conf)
            ipend=`/bin/echo $instance_ip | /bin/sed 's/\./\-/g'`
            /bin/echo "$instance_ip $recordName.$domain $recordName-$ipend">> /etc/hosts
            /bin/hostname $recordName-$ipend
          }

          install_software

          configure_hosts || error_exit "Fail to configure Hostname on EC2 Host"

          /opt/aws/bin/cfn-init -v --region ${AWS::Region} \
                                   --stack ${AWS::StackName} \
                                   --configsets InstallAndRun \
                                   --resource ContainerInstances

          function configure_newrelic {
            /usr/local/bin/aws s3 cp \
                                  s3://${ResourceBucketName}/newrelic/${NewRelicRPM} \
                                  /tmp/${NewRelicRPM} \
                                  --region ${AWS::Region}
            /bin/rpm -vhi /tmp/${NewRelicRPM}
            /usr/sbin/usermod -a -G docker newrelic
            /usr/sbin/nrsysmond-config --set license_key=${NewRelicLicenseKey}
            /bin/echo hostname=$(/bin/hostname) >> /etc/newrelic/nrsysmond.cfg
            /etc/init.d/newrelic-sysmond start
            /bin/ps aux | grep newrelic
            /sbin/chkconfig newrelic-sysmond on
            /bin/rm -f /tmp/${NewRelicRPM}
          }

          function configure_ecs {
            /bin/echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config && \
            /bin/echo ECS_LOGLEVEL=error >> /etc/ecs/ecs.config
          }

          configure_newrelic        || error_exit "Fail to install NewRelic agent on EC2 Host"
          configure_ecs             || error_exit "Fail to Final config steps for logging and ecs cluster"
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  AutoscalingRole:
    DependsOn: 'ECSAutoScalingGroup'
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
      - 'arn:aws:iam::aws:policy/AutoScalingFullAccess'
      - 'arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: 'CloudformationInstancesignal'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cloudformation:DescribeStackResource
            - cloudformation:SignalResource
            Resource:
            - '*'
  ECSServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ecs.amazonaws.com'
          Action: 'sts:AssumeRole'
  HpServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: 'AutoscalingRole'
    Properties:
      MaxCapacity: !Ref 'MaxSize'
      MinCapacity: !Ref 'MinSizeAS'
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster: !Ref 'ECSCluster'
        Service: !GetAtt 'HPService.Name'
      RoleARN: !GetAtt 'AutoscalingRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs

  HpServiceScalingUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'HpServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 25

  HpServiceScalingDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'HpServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 300
        MinAdjustmentMagnitude: 1
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -25

  ECSHpHigh:
    Type: AWS::CloudWatch::Alarm
    DependsOn: 'HPService'
    Properties:
      AlarmDescription: 'Scale-up if MemoryUtilization  90% for 5 minutes ECSHpHigh '
      AlarmName: !Join ['', ['ECSHpHigh-Mem-90%', '-', !Ref 'Env', '-', !Ref 'Version']]
      MetricName: 'MemoryUtilization'
      Namespace: 'AWS/ECS'
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '5'
      Threshold: '90'
      AlarmActions:
      - Ref: 'HpServiceScalingUpPolicy'
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'HPService.Name'
      ComparisonOperator: GreaterThanThreshold

  ECSHPMemLow:
    Type: AWS::CloudWatch::Alarm
    DependsOn: 'HPService'
    Properties:
      AlarmDescription: 'Scale-Down if MemoryUtilization  25% for 15 minutes ECSHPMemLow '
      AlarmName: !Join ['', ['ECSHPMemLow-Mem-25%', '-', !Ref 'Env', '-', !Ref 'Version']]
      MetricName: 'MemoryUtilization'
      Namespace: 'AWS/ECS'
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '3'
      Threshold: '25'
      AlarmActions:
      - Ref: 'HpServiceScalingDownPolicy'
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'ECSCluster'
      - Name: ServiceName
        Value: !GetAtt 'HPService.Name'
      ComparisonOperator: LessThanThreshold

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECSSecurityGroup.
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: '0.0.0.0/0'
        Description: 'SSH-Port'
      - IpProtocol: tcp
        FromPort: '32768'
        ToPort: '42000'
        CidrIp: !Ref 'VpcCidr'
        Description: 'ECS-ALB-Service-port'
      - IpProtocol: icmp
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: !Ref 'VpcCidr'
        Description: 'Ping-Port'
      Tags:
      - Value: 'ECS-Instance-SecurityGroup'
        Key: Name

  HpTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/status/heartbeat'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 8
      Matcher:
        HttpCode: '200-301'
      Port: !Ref 'HpTargetGroupPort'
      Protocol: HTTP
      VpcId: !Ref 'VPC'
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: 20
  HpHttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref HpTargetGroup
        Type: forward
      LoadBalancerArn: !Ref AlbLoadBalancer
      Port: !Ref 'HpTargetGroupPort'
      Protocol: HTTP
  HpListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'HpTargetGroup'
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
          - "*"
      ListenerArn: !Ref HpHttpListener
      Priority: 1

  HPService:
    Type: AWS::ECS::Service
    DependsOn: [ECSAutoScalingGroup, HpHttpListener]
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: !Ref HpserviceCount
      DeploymentConfiguration:
        MaximumPercent: '150'
        MinimumHealthyPercent: '50'
      LoadBalancers:
      - ContainerName: ECS-HP-TASK
        ContainerPort: '9000'
        TargetGroupArn: !Ref 'HpTargetGroup'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition:
        Ref: HPtaskdefinition

  HPtaskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: ECS-HP-TASK
        Memory: !Ref Hptaskmem
        MemoryReservation: '128'
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            'awslogs-region': !Ref 'AWS::Region'
            'awslogs-group': !Ref 'AwslogsGroupHp'
            'awslogs-stream-prefix': !Ref 'AWS::StackName'
        PortMappings:
        - HostPort: '0'
          Protocol: tcp
          ContainerPort: '9000'
        Environment:
        - Name: NODE_ENV
          Value: !Sub '${Env}'
        - Name: NEW_RELIC_LICENSE_KEY
          Value: !Sub '${NewRelicLicenseKey}'
        - Name: NEW_RELIC_APP_NAME
          Value: !Join ['', [!Ref 'Project', '-', !Ref 'Env', '-' ,'PPP']]
        Image: !Join ['', [!Ref 'ECRRegistry', '/', !Ref 'HpECRRepo', ':', !Ref 'HpBuildEcr']]
Outputs:
  Newluanchlambda:
    Value: !GetAtt LifecycleHandlerFunction.Arn
    Description: Lambda Function Arn
  EcsClusterName:
    Value: !Ref 'ECSCluster'